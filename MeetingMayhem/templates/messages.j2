

<script>
$(document).ready(function(){ 
    var keys = Object.keys(localStorage);
    var i =0;
    for (i=0;i<keys.length; i++) {
        var key = keys[i];
        const containerState = localStorage.getItem(key);
        const item_found = document.getElementById(key);
        if(!Object.is(item_found, null)){
            switch (containerState) {
                case 'visible':
                item_found.style.display = "";
                break;
                case 'hidden':
                item_found.style.display = "none";
                break;
                default:
            }
        }

    }

});
</script>
<script>
function decrypt(id_button){
    const msg_id = id_button.split("-")[1];
    const sender = id_button.split("-")[2];
    const recipent = id_button.split("-")[3];
    const encryption_type = id_button.split("-")[4];
    const encryption_key = id_button.split("-")[5];
    const key_owner = encryption_key.split("_")[1];
    const key_owner2 = encryption_key.split("_")[2];
    console.log(key_owner);
    console.log(key_owner2);
    console.log(msg_id);
    console.log(sender);
    console.log(recipent);
    console.log(encryption_type);
    console.log(encryption_key);
    const decryption_type = document.getElementById(`decryption_type_select-${msg_id}`).value;
    const decryption_key = document.getElementById(`decryption_key_select-${msg_id}`).value;
    console.log(decryption_key);
    console.log(decryption_type);
    var socket = io();
    if (encryption_type === "symmetric") {
        // Not select correct decryption type
        if (decryption_type !=="symmetric" ){
            alert("Please select symmetric decryption for the type!");
            return;
        }
        // correct Key
        if (decryption_key === "Shared_".concat(key_owner,"_",key_owner2) || decryption_key === "Shared_".concat(key_owner2,"_",key_owner)){
            document.getElementById(`content-${msg_id}`).style.display = "";
            document.getElementById(`${id_button}`).style.display = "none";
            document.getElementById(`decryption-${ msg_id }-${ recipent }`).style.display = "none";
            localStorage.setItem(`content-${msg_id}`, document.getElementById(`content-${msg_id}`).style.display !== "none" ? 'visible' : 'hidden');
            localStorage.setItem(`${id_button}`, document.getElementById(`${id_button}`).style.display !== "none" ? 'visible' : 'hidden');
            localStorage.setItem(`decryption-${ msg_id }-${ recipent }`, document.getElementById(`decryption-${ msg_id }-${recipent }`).style.display !== "none" ? 'visible' : 'hidden');
            socket.emit('decrypted', { message: msg_id });
        }
        // Wrong key
        else{
            alert("Please select correct Key for symmetric encryption");
        }
    }
    else if (encryption_type === "asymmetric") {
        // Wrong decryption Type
        if (decryption_type !=="asymmetric" ){
            alert("Please select asymmetric decryption for the type!");
            return;
        }
        // correct way to do asymmetric encryption : encrypt with Receiver's public key
        if (encryption_key.startsWith("public_")){
            // use reciever's private key
            if (decryption_key === "private_".concat(key_owner)){
                document.getElementById(`content-${msg_id}`).style.display = "";
                document.getElementById(`${id_button}`).style.display = "none";
                document.getElementById(`decryption-${ msg_id }-${ recipent }`).style.display = "none";
                localStorage.setItem(`content-${msg_id}`, document.getElementById(`content-${msg_id}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`${id_button}`, document.getElementById(`${id_button}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`decryption-${ msg_id }-${ recipent }`, document.getElementById(`decryption-${ msg_id }-${recipent }`).style.display !== "none" ? 'visible' : 'hidden');
                socket.emit('decrypted', { message: msg_id });
            }
            else{
                alert("Please select correct Key for asymmetric encryption");
            }
        }
        // Wrong way to do asymmetric encryption: use sender's public key
        if (encryption_key.startsWith("private_")){
            // use sender's public key
            if (decryption_key === "public_".concat(key_owner)){
                document.getElementById(`content-${msg_id}`).style.display = "";
                document.getElementById(`${id_button}`).style.display = "none";
                document.getElementById(`decryption-${ msg_id }-${ recipent }`).style.display = "none";
                localStorage.setItem(`content-${msg_id}`, document.getElementById(`content-${msg_id}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`${id_button}`, document.getElementById(`${id_button}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`decryption-${ msg_id }-${ recipent }`, document.getElementById(`decryption-${ msg_id }-${recipent }`).style.display !== "none" ? 'visible' : 'hidden');
                socket.emit('decrypted', { message: msg_id });
            }
            else{
                alert("Please select correct Key for asymmetric encryption");
            }
        }
    } 
    else if (encryption_type === "signed"){
        // Wrong decryption Type
        if (decryption_type !=="signed" ){
            alert("Please select Verification of Signature for the type!");
            return;
        }
        // correct way to do signature :sign with sender's private key
        if (encryption_key.startsWith("private_")){
            // use own private key
            if (decryption_key === "public_".concat(key_owner)){
                document.getElementById(`content-${msg_id}`).style.display = "";
                document.getElementById(`${id_button}`).style.display = "none";
                document.getElementById(`decryption-${ msg_id }-${ recipent }`).style.display = "none";
                localStorage.setItem(`content-${msg_id}`, document.getElementById(`content-${msg_id}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`${id_button}`, document.getElementById(`${id_button}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`decryption-${ msg_id }-${ recipent }`, document.getElementById(`decryption-${ msg_id }-${recipent }`).style.display !== "none" ? 'visible' : 'hidden');
                socket.emit('decrypted', { message: msg_id });
            }
            else{
                alert("Please select correct Key for Verification of Signature!");
            }
        }
        // Wrong way to do signature: use reciever's public key
        if (encryption_key.startsWith("public_")){
            // use own private key
            if (decryption_key === "private_".concat(key_owner)){
                document.getElementById(`content-${msg_id}`).style.display = "";
                document.getElementById(`${id_button}`).style.display = "none";
                document.getElementById(`decryption-${ msg_id }-${ recipent }`).style.display = "none";
                localStorage.setItem(`content-${msg_id}`, document.getElementById(`content-${msg_id}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`${id_button}`, document.getElementById(`${id_button}`).style.display !== "none" ? 'visible' : 'hidden');
                localStorage.setItem(`decryption-${ msg_id }-${ recipent }`, document.getElementById(`decryption-${ msg_id }-${recipent }`).style.display !== "none" ? 'visible' : 'hidden');
                socket.emit('decrypted', { message: msg_id });
            }
            else{
                alert("Please select correct Key for Verification of Signature!");
            }
        }
        
    } 
    else{
        alert("Error");
    }

}

</script>

<script>

    // This script will limit the permission of certain key
    var options_for_decrypt = document.querySelectorAll('[data-group="decrypt_options"]');
    for (let i = 0; i < options_for_decrypt.length; i++) {
        msg_id = options_for_decrypt[i].id.split("-")[1];
        current_user_username = options_for_decrypt[i].id.split("-")[2].replace(',', '');
        decryption_type_select = document.getElementById(`decryption_type_select-${msg_id}`);
        de_key_select = document.getElementById(`decryption_key_select-${msg_id}`);
       
        //var decrytion_type = decryption_type_select.value;
        decryption_type_select.addEventListener("change", function() {
            msg_id = options_for_decrypt[i].id.split("-")[1];
            // Get the selected user from the dropdown
            new_decryption_type_select =  document.getElementById(`decryption_type_select-${msg_id}`);
            de_default_key = document.getElementById(`default_key_select-${msg_id}`);
            de_key_select = document.getElementById(`decryption_key_select-${msg_id}`);
            all_options = de_key_select.querySelectorAll('option');
            if (new_decryption_type_select.value === "symmetric") {
                all_options.forEach((single_option) => {
                    single_option.disabled = true;
                });
                let shared = de_key_select.querySelectorAll('option[value^=Shared]');
                shared.forEach((userItem) => {
                    userItem.disabled = false;
                });
                de_default_key.disabled = false
            }
            else if(new_decryption_type_select.value  === 'asymmetric' || new_decryption_type_select.value  === 'signed' ){
                all_options.forEach((single_option) => {
                    single_option.disabled = false;
                });
                let shared = de_key_select.querySelectorAll('option[value^=Shared]');
                shared.forEach((userItem) => {
                    userItem.disabled = true;
                });
            }
            else{
                all_options.forEach((single_option) => {
                    single_option.disabled = false;
                });
            }  

        });
    }

   </script>


{% macro user_interface(usernames,current_user_name,include,name) -%}
    {% if include %}
        {% for username,img_url in usernames %}
            {% if username !=  name %}
                <div class="form-check form-check-inline">
                    <!-- below line needs the ', ' in value to make processing usernames easier -->
                    <input class="form-check-input" type="checkbox" id="inlineCheckbox1-{{username}}-{{current_user_name}}" name="{{current_user_name}}"
                        value="{{ username }}" >
                    <img src="{{img_url}}" alt="Avatar" width="50px" height="50px">
                    <label class="form-check-label" for="inlineCheckbox1-{{username}}-{{current_user_name}}"> {{ username }}</label>
                </div>
             {% endif %}
        {% endfor %}
    {% else %}
        {% for username,img_url in usernames %}
            {% if username !=  current_user_name %}
                <div class="form-check form-check-inline">
                <!-- below line needs the ', ' in value to make processing usernames easier -->
                <input class="form-check-input" type="checkbox" id="inlineCheckbox1-{{username}}" name="recipients"
                    value="{{ username }}, " onclick="onlyOne(this)" >
                <img src="{{img_url}}" alt="Avatar" width="50px" height="50px">
                <label class="form-check-label" for="inlineCheckbox1-{{username}}"> {{ username }}</label>
                </div>
            {% endif %}
        {% endfor %}
    {% endif %}
{%- endmacro -%}